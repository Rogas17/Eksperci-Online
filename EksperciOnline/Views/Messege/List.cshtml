@model EksperciOnline.Models.ViewModels.ChatListViewModel

@{
    ViewData["Title"] = "Wiadomości";
}

<style>
    .message-container {
        height: 60vh; /* Wysokość kontenera na wiadomości */
        overflow-y: scroll; /* Scrollowanie w pionie */
    }

    .user-list {
        height: 69vh; /* Wysokość kontenera na listę użytkowników */
        overflow-y: scroll; /* Scrollowanie w pionie */
    }
</style>

<div class="bg-light py-2">
    <div class="container">
        <h1>Wiadomości</h1>
    </div>
</div>

@if (Model.Chats != null && Model.Chats.Any())
{
    <div class="container-fluid px-5">
        <div class="row mt-5">
            <!-- Panel z użytkownikami -->
            <div class="col-md-3">
                <div class="user-list bg-light rounded-2">
                    <div class="list-group me-2 p-1">
                        @foreach (var chat in Model.Chats)
                        {
                            <a href="@Url.Action("List", "Messege", new { chatId = chat.Id })"
                               class="list-group-item list-group-item-action m-1 @(chat.Id == Model.ActiveChatId ? "active" : "")">
                                @chat.ServiceProviderName
                            </a>
                        }
                    </div>
                </div>
            </div>

            <!-- Panel z wiadomościami -->
            <div class="col-md-9">
                <div id="messages" class="message-container bg-light rounded-2">
                    @if (Model.ActiveChatId != Guid.Empty)
                    {
                        var activeChat = Model.Chats.FirstOrDefault(c => c.Id == Model.ActiveChatId);
                        if (activeChat != null && activeChat.Messages.Any())
                        {
                            foreach (var message in activeChat.Messages)
                            {
                                <div class="card bg-light m-3">
                                    <div class="d-flex justify-content-between card-header">
                                        <div>
                                            @message.SenderName
                                        </div>
                                        <div>
                                            @message.Timestamp
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <p>@message.Content</p>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>

                <!-- Formularz do wpisywania wiadomości -->
                <div class="input-group mt-3">
                    <input class="form-control" placeholder="Wpisz wiadomość..." id="messageInput"></input>
                    <div class="input-group-append">
                        <button class="btn btn-info py-3" id="sendButton">Wyślij</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const chatId = "@Model.ActiveChatId";
        const connection = new signalR.HubConnectionBuilder().withUrl(`/chathub?chatId=${chatId}`).build();

        function scrollToBottom() {
            const messageContainer = document.getElementById("messages");
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        async function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            const content = messageInput.value.trim();

            if (content) {
                await connection.invoke("SendMessage", chatId, content);
                messageInput.value = "";
            }
        }

        connection.on("ReceiveMessage", (senderName, content, timestamp) => {
            const messageContainer = document.getElementById("messages");
            const message = document.createElement("div");
            message.classList.add("card", "bg-light", "m-3");

            message.innerHTML = `
                    <div class="d-flex justify-content-between card-header">
                        <div>${senderName}</div>
                        <div>${timestamp || "Przed chwilą"}</div>
                    </div>
                    <div class="card-body">
                        <p>${content}</p>
                    </div>
                `;

            messageContainer.appendChild(message);

            // Przewijanie na dół po otrzymaniu nowej wiadomości
            scrollToBottom();
        });

        connection.start().then(() => {
            // Przewijanie na dół po załadowaniu strony
            scrollToBottom();
        }).catch(err => console.error(err.toString()));

        // Wysyłanie wiadomości po kliknięciu przycisku "Wyślij"
        document.getElementById("sendButton").addEventListener("click", sendMessage);

        // Wysyłanie wiadomości po wciśnięciu Enter
        document.getElementById("messageInput").addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
                event.preventDefault(); // Zapobiega dodawaniu nowej linii w textarea
                sendMessage();
            }
        });
    </script>


}

